export const PATTERN_KEYS = [
  "Quick Sort",
  "Merge Sort",
  "Stack Sort",
  "Heap Sort",
  "Bubble Sort",
  "Selection Sort",
  "Insertion Sort",
  "Binary Search",
  "Binary Search on Answer",
  "Linear Search",
  "Two Sum",
  "Two Sum Dict",
  "Two Sum Two Pointers",
  "Dynamic Programming",
  "Dynamic Programming Pattern",
  "Dynamic Programming Fibonacci",
  "Dynamic Programming Iterative",
  "Dynamic Programming Coin Change",
  "Greedy Activity Selection",
  "Greedy Fractional Knapsack",
  "Greedy Job Scheduling",
  "Greedy Huffman Coding",
  "Greedy Dijkstra",
  "Sliding Window",
  "Bit Manipulation",
  "Topological Sort",
  "DFS",
  "DFS Linked List",
  "DFS Binary Tree",
  "BFS",
  "BFS Linked List",
  "Stack Implementation",
  "Queue Implementation",
  "Linked List",
  "Circular Linked List",
  "Hash Table",
  "Monotonic Stack",
  "Monotonic Queue",
  "Two Pointers",
  "Prefix Sum",
  "Floyd Cycle Detection",
  "Matrix Traversal",
  "Matrix Traversal Recursive",
  "Matrix Spiral Traversal",
  "Matrix Spiral Recursive",
  "Binary Search Tree",
  "Trie Operations",
  "Ternary Search",
  "Jump Search",
  "Exponential Search",
  "Heap Implementation",
  "Extended Euclidean",
  "Extended Euclidean Algorithm",
  "Graph Prim",
  "Graph Kruskal",
  "Graph Floyd-Warshall",
  "Graph Bellman-Ford",
  "Bellman-Ford",
  "Divide and Conquer",
  "Articulation Points",
  "Graph Dijkstra",
  "Graph Kosaraju",
  "Network Flow",
  "Strongly Connected Components",
  "Maximum Bipartite Matching",
  "A* Search",
  "Grid Traversal",
  "State Compression DP",
  "Digit DP",
  "Tree DP",
  "Probability DP",
  "Interpolation Search",
  "Fibonacci Search",
  "Chinese Remainder Theorem",
  "Sieve of Eratosthenes",
  "Sieve of Atkin",
  "Sieve of Sundaram",
  "Graph Articulation Points",
  "Graph Bridges",
  "Kadane's Algorithm",
  "Rabin-Karp",
  "KMP Algorithm",
  "Manacher's Algorithm",
  "Z Algorithm",
  "Suffix Array",
  "Suffix Tree",
  "Union Find",
  "Miller-Rabin",
  "Miller-Rabin Primality Test",
  "Fast Fourier Transform",
  "Matrix Exponentiation",
  "Rotate Matrix",
] as const;

export type PatternKey = (typeof PATTERN_KEYS)[number];

export interface AlgorithmPattern {
  title: string;
  description: string;
  timeComplexity: string;
  spaceComplexity: string;
  pseudocode: string;
  example: string;
  implementation: string;
  category: string;
  pattern?: string;
}
