import { PatternKey } from "./types.ts";

export const patternMapping: Record<PatternKey, string> = {
  "A* Search": "a-star-search",
  "Activity Selection": "activity-selection",
  "Articulation Points": "articulation-points",
  "AVL Tree": "avl-tree",
  Backtracking: "backtracking",
  "Bellman-Ford": "bellman-ford",
  BFS: "bfs",
  "BFS Linked List": "bfs-linked-list",
  "Binary Search": "binary-search",
  "Binary Search on Answer": "binary-search-on-answer",
  "Binary Search Tree": "binary-search-tree",
  "Bit Manipulation": "bit-manipulation",
  "B Tree": "b-tree",
  "Bubble Sort": "bubble-sort",
  "Chinese Remainder Theorem": "chinese-remainder-theorem",
  "Circular Linked List": "circular-linked-list",
  DFS: "dfs",
  "DFS Binary Tree": "dfs-binary-tree",
  "DFS Linked List": "dfs-linked-list",
  "Digit DP": "digit-dp",
  "Divide and Conquer": "divide-and-conquer",
  "Dynamic Programming": "dynamic-programming",
  "Dynamic Programming Coin Change": "dynamic-programming-coin-change",
  "Dynamic Programming Fibonacci": "dynamic-programming-fibonacci",
  "Dynamic Programming Iterative": "dynamic-programming-iterative",
  "Dynamic Programming Pattern": "dynamic-programming-pattern",
  "Exponential Search": "exponential-search",
  "Extended Euclidean": "extended-euclidean",
  "Fast Fourier Transform": "fast-fourier-transform",
  "Fenwick Tree": "fenwick-tree",
  "Fibonacci Search": "fibonacci-search",
  "Floyd Cycle Detection": "floyd-cycle-detection",
  "Floyd-Warshall": "floyd-warshall",
  "Fractional Knapsack": "fractional-knapsack",
  Graph: "graph",
  Greedy: "greedy",
  "Grid Traversal": "grid-traversal",
  "Heap Implementation": "heap-implementation",
  "Heap Sort": "heap-sort",
  "Heavy Light Decomposition": "heavy-light-decomposition",
  "Huffman Coding": "huffman-coding",
  "Hungarian Algorithm": "hungarian-algorithm",
  "Insertion Sort": "insertion-sort",
  "Interpolation Search": "interpolation-search",
  "Job Scheduling": "job-scheduling",
  "Jump Search": "jump-search",
  "Kadane's Algorithm": "kadane-algorithm",
  "Knuth-Morris-Pratt": "kmp-algorithm",
  Kosaraju: "kosaraju",
  Kruskal: "kruskal",
  "Linear Search": "linear-search",
  "Linked List": "linked-list",
  "Lowest Common Ancestor": "lowest-common-ancestor",
  "Manacher's Algorithm": "manacher-algorithm",
  "Matrix Chain Multiplication": "matrix-chain-multiplication",
  "Matrix Exponentiation": "matrix-exponentiation",
  "Matrix Operations": "matrix-operations",
  "Matrix Spiral Recursive": "matrix-spiral-recursive",
  "Matrix Spiral Traversal": "matrix-spiral-traversal",
  "Matrix Traversal": "matrix-traversal",
  "Matrix Traversal Recursive": "matrix-traversal-recursive",
  "Maximum Bipartite Matching": "maximum-bipartite-matching",
  Memoization: "memoization",
  "Merge Sort": "merge-sort",
  "Miller-Rabin Primality Test": "miller-rabin-primality-test",
  "Monotonic Queue": "monotonic-queue",
  "Monotonic Stack": "monotonic-stack",
  "Network Flow": "network-flow",
  "Null Pattern": "null-pattern",
  "Prefix Sums": "prefix-sums",
  Prim: "prim",
  "Prime Factorization": "prime-factorization",
  "Probability DP": "probability-dp",
  "Queue Implementation": "queue-implementation",
  Quickselect: "quickselect",
  "Quick Sort": "quick-sort",
  "Rabin-Karp": "rabin-karp",
  "Radix Sort": "radix-sort",
  "Red-Black Tree": "red-black-tree",
  Recursion: "recursion",
  "Rotate Matrix": "rotate-matrix",
  "Segment Tree": "segment-tree",
  "Selection Sort": "selection-sort",
  "Sieve of Atkin": "sieve-of-atkin",
  "Sieve of Eratosthenes": "sieve-of-eratosthenes",
  "Sieve of Sundaram": "sieve-of-sundaram",
  "Sliding Window": "sliding-window",
  "Stack Implementation": "stack-implementation",
  "Stack Sort": "stack-sort",
  "State Compression DP": "state-compression-dp",
  String: "string",
  "String Operations": "string-operations",
  "Strongly Connected Components": "strongly-connected-components",
  "Suffix Array": "suffix-array",
  "Suffix Tree": "suffix-tree",
  "Ternary Search": "ternary-search",
  "Test Data": "test-data",
  "Topological Sort": "topological-sort",
  Tree: "tree",
  "Tree DP": "tree-dp",
  "Trie Operations": "trie-operations",
  "Two Pointers": "two-pointers",
  "Two Sum": "two-sum",
  "Two Sum Dict": "two-sum-dict",
  "Two Sum Two Pointers": "two-sum-two-pointers",
  "Union Find": "union-find",
  "Z Algorithm": "z-algorithm",
};
